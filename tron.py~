# game module that hold the game being played
import pygame, sys
from pygame.locals import *
from networking import NetworkGame, Server
FPS = pygame.time.Clock()

class LightBike():
  def __init__(self, startloc, startvel, color):
    self.location = startloc
    self.velocity = startvel
    self.color = color
  def movedown(self):
    self.velocity[0] = 0
    self.velocity[1] = 1
  def moveup(self):
    self.velocity[0] = 0
    self.velocity[1] = -1
  def moveleft(self):
    self.velocity[0] = -1
    self.velocity[1] = 0
  def moveright(self):
    self.velocity[0] = 1
    self.velocity[1] = 0
  def update(self):
    self.location[0] += self.velocity[0]
    self.location[1] += self.velocity[1]


class Game(NetworkGame):
  """holds the Game class"""
  def __init__(self, location):
    super(Game, self).__init__(location)
    self.GRID_SIZEX = 33 # will probably need to be rectangular
    self.GRID_SIZEY = 20
    self.loc = []
    for x in range(0,self.GRID_SIZEX + 1):
      self.loc.append([])
      for y in range(0,self.GRID_SIZEY + 1):
        self.loc[x].append(0) # 0 means not moved there yet
    print self.tile
    self.SCALE = 60
    self.WIDTH = len(self.loc) * self.SCALE
    self.HEIGHT = len(self.loc[0]) * self.SCALE
    self.SIZE = (self.WIDTH, self.HEIGHT) # widt
    self.player1 = LightBike([0,5], [1,0], (255,0,0))
    self.player2 = LightBike([9,5], [-1,0], (0,255,0))
    pygame.init()
    self.window = pygame.display.set_mode(self.SIZE)
    self.image_dict = self.load_images()
    self.last_loc_1 = [[-1, 0], 'hor'] # initilize off screen, shouldn't affect anythin
    self.last_2_loc_1 = [[-2,0], 'hor']
    self.last_loc_2 = [[-1, 0], 'hor'] # initilize off screen, shouldn't affect anythin
    self.last_2_loc_2 = [[-2,0], 'hor']
    # print 'herel'

  def update(self, data):
    # called after recieving the networked data 
    self.last_2_loc_1[0] = self.last_loc_1[0] 
    self.last_loc_1[0] = self.player1.location


    self.last_2_loc_2[0] = self.last_loc_2[0]
    self.last_loc_2[0] = self.player2.location

    translated_pos_1, translated_pos_2 = self.translate_position(data)
    # print "player 1 trans " + str(translated_pos_1)
    # print "player 2 trans" + str(translated_pos_2)
    if translated_pos_1 != 0:
      self.player1.location = translated_pos_1
      if self.loc_collision(self.loc, self.player1):
      # will have to send to master node that there is a winner!
        print 'PLAYER 2 WINS'
        data_struct = {'player_locations':
                    ([self.player1.location[0],self.player1.location[1]],
                     [self.player2.location[0],self.player2.location[1]]),
                     'msg': 'Cont',
                     'state': 1}  
        # sys.exit()  
        return data_struct
      else:
        self.loc[self.player1.location[0]][self.player1.location[1]] = 1
        self.draw_logic(self.last_2_loc_1, self.last_loc_1, self.player1.location, 'c')
        # pygame.draw.rect(self.window, self.player1.color, 
        #             (self.player1.location[0]*self.SCALE, 
        #              self.player1.location[1]*self.SCALE, 
        #              self.SCALE, self.SCALE))

    if translated_pos_2 != 0:
      self.player2.location = translated_pos_2
      if self.loc_collision(self.loc, self.player2):
        print 'PLAYER 1 WINS'
        data_struct = {'player_locations':
                ([self.player1.location[0],self.player1.location[1]],
                  [self.player2.location[0],self.player2.location[1]]),
                'msg': 'player1 wins',
                'state': 1}
        # sys.exit()
        return data_struct
      else:
        self.loc[self.player2.location[0]][self.player2.location[1]] = 1
        pygame.draw.rect(self.window, self.player2.color, 
                        (self.player2.location[0]*self.SCALE, 
                        self.player2.location[1]*self.SCALE, 
                        self.SCALE, self.SCALE))


    pygame.display.flip()

    data_struct = {'player_locations':
                  ([self.player1.location[0],self.player1.location[1]],
                    [self.player2.location[0],self.player2.location[1]]),
                  'msg': 'Cont',
                  'state': 0}

    return(data_struct)

  def loc_collision(self, loc, bike):
    # check the location array to see if colided.
    # if bike.location[0] < 0 or bike.location[0] > self.GRID_SIZEX:
    #   print "died of screen in x"
    #   return True
    # if bike.location[1] < 0 or bike.location[1] > self.GRID_SIZEY:
    #   print "died off screen in y"
    #   return True
    if loc[bike.location[0]][bike.location[1]] == 1:
      print "location already occupied at " + str(bike.location[0]) + " " + str(bike.location[1])
      # something was drawn there you hit!!
      return True
    else:
      return False
    # FPS.tick(10)
    # print data

  def draw_logic(self, last_2_loc, last_loc, current_loc, which):
    """handles the logic of what to draw and what the orientation is"""
    if last_loc[0][0] == current_loc[0] and last_loc[0][0] == last_2_loc[0][0]:
      # traveling vertically straight
      if last_loc[0][1] > current_loc[1]:
        # traveling UP
        self.draw(current_loc, self.image_dict[which + '_hd_up'])
        self.draw(last_loc[0], self.image_dict[which + '_md_ver_u'])
      else:
        # traveling DOWN
        self.draw(current_loc, self.image_dict[which + '_hd_dn'])
        self.draw(last_loc[0], self.image_dict[which + '_md_ver_d'])
      if last_loc[1] != 'cor':
        # don't override corners for tail
        self.draw(last_2_loc[0], self.image_dict[which + '_tl_'+last_loc[1]] )
      last_loc[1] = 'ver'
    elif last_loc[0][1] == current_loc[1] and last_loc[0][1] == last_2_loc[0][1]:
      # traveling horizontally straight
      if last_loc[0][0] > current_loc[0]:
         # traveling left
        self.draw(current_loc, self.image_dict[which + '_hd_lf'])
        self.draw(last_loc[0], self.image_dict[which + '_md_hor_l'])
      else:
         # traveling right
        self.draw(current_loc, self.image_dict[which + '_hd_rt'])
        self.draw(last_loc[0], self.image_dict[which + '_md_hor_r'])
      if last_loc[1] != 'cor':
        # don't override corners for tail
        self.draw(last_2_loc[0], self.image_dict[which + '_tl_'+last_loc[1]] )
      last_loc[1] = 'hor' 
    else:
      print "here"
      print "current_loc = " + str(current_loc) + "prev_loc = " + str(last_loc) + " last_2_loc = " + str(last_2_loc)
      # at a corner, checking explicitly for the eight cases
      if (current_loc[0] == last_loc[0][0] and current_loc[0] > last_2_loc[0][0]
         and current_loc[1] > last_loc[0][1] and current_loc[1] > last_2_loc[0][1]):
         #upper right, going down
         self.draw(current_loc, self.image_dict[which + '_hd_dn'])
         self.draw(last_loc[0], self.image_dict[which + '_co_ur'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_hor'])
         last_loc[1] = 'cor'

      elif (current_loc[0] < last_loc[0][0] and current_loc[0] < last_2_loc[0][0]
         and current_loc[1] == last_loc[0][1] and current_loc[1] < last_2_loc[0][1]):
         #upper right, going left
         self.draw(current_loc, self.image_dict[which + '_hd_lf'])
         self.draw(last_loc[0], self.image_dict[which + '_co_ur'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_ver'])
         last_loc[1] = 'cor'

      elif (current_loc[0] > last_loc[0][0] and current_loc[0] > last_2_loc[0][0]
         and current_loc[1] == last_loc[0][1] and current_loc[1] > last_2_loc[0][1]):
         # lower left, going right
         self.draw(current_loc, self.image_dict[which + '_hd_rt'])
         self.draw(last_loc[0], self.image_dict[which + '_co_ll'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_ver'])
         last_loc[1] = 'cor'

      elif (current_loc[0] == last_loc[0][0] and current_loc[0] < last_2_loc[0][0]
         and current_loc[1] < last_loc[0][1] and current_loc[1] < last_2_loc[0][1]):
         # lower left, clockwise
         self.draw(current_loc, self.image_dict[which + '_hd_up'])
         self.draw(last_loc[0], self.image_dict[which + '_co_ll'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_hor'])
         last_loc[1] = 'cor'

      elif (current_loc[0] > last_loc[0][0] and current_loc[0] > last_2_loc[0][0]
         and current_loc[1] == last_loc[0][1] and current_loc[1] < last_2_loc[0][1]):
         # upper left clockwise
         self.draw(current_loc, self.image_dict[which + '_hd_rt'])
         self.draw(last_loc[0], self.image_dict[which + '_co_ul'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_ver'])
         last_loc[1] = 'cor'

      elif (current_loc[0] == last_loc[0][0] and current_loc[0] < last_2_loc[0][0]
         and current_loc[1] > last_loc[0][1] and current_loc[1] > last_2_loc[0][1]):
         # upper left counterclockwise
         self.draw(current_loc, self.image_dict[which + '_hd_dn'])
         self.draw(last_loc[0], self.image_dict[which + '_co_ul'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_hor'])
         last_loc[1] = 'cor'

      elif (current_loc[0] == last_loc[0][0] and current_loc[0] > last_2_loc[0][0]
         and current_loc[1] < last_loc[0][1] and current_loc[1] < last_2_loc[0][1]):
         # lower right counterclockwise
         self.draw(current_loc, self.image_dict[which + '_hd_up'])
         self.draw(last_loc[0], self.image_dict[which + '_co_lr'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_hor'])
         last_loc[1] = 'cor'

      elif (current_loc[0] < last_loc[0][0] and current_loc[0] < last_2_loc[0][0]
         and current_loc[1] == last_loc[0][1] and current_loc[1] > last_2_loc[0][1]):
         # lower right clockwise
         self.draw(current_loc, self.image_dict[which + '_hd_lf'])
         self.draw(last_loc[0], self.image_dict[which + '_co_lr'])
         self.draw(last_2_loc[0], self.image_dict[which + '_tl_ver'])
         last_loc[1] = 'cor'







  def draw(self, location, image):
    """draws the image at the location, properly scaled from the grid space,
    draws a black square first where it will be drawn"""
    pygame.draw.rect(self.window, (0,0,0), 
                        (location[0]*self.SCALE, 
                        location[1]*self.SCALE, 
                        self.SCALE, self.SCALE))
    self.window.blit(image, (location[0]*self.SCALE, location[1]*self.SCALE))


  def load_images(self):
    image_dict = {}
    image_dict['c_hd_rt'] = pygame.image.load('assets/comet_head.png').convert_alpha()
    image_dict['c_hd_dn'] = pygame.transform.rotate(image_dict['c_hd_rt'], -90)
    image_dict['c_hd_lf'] = pygame.transform.rotate(image_dict['c_hd_rt'], -180)
    image_dict['c_hd_up'] = pygame.transform.rotate(image_dict['c_hd_rt'], -270)

    image_dict['m_hd_rt'] = pygame.image.load('assets/meteor_head.png').convert_alpha()
    image_dict['m_hd_dn'] = pygame.transform.rotate(image_dict['m_hd_rt'], -90)
    image_dict['m_hd_lf'] = pygame.transform.rotate(image_dict['m_hd_rt'], -180)
    image_dict['m_hd_up'] = pygame.transform.rotate(image_dict['m_hd_rt'], -270)

    image_dict['c_md_hor_r'] = pygame.image.load('assets/comet_mid.png').convert_alpha()
    image_dict['c_md_ver_u'] = pygame.transform.rotate(image_dict['c_md_hor_r'], 90)
    image_dict['c_md_hor_l'] = pygame.transform.rotate(image_dict['c_md_hor_r'], 180)
    image_dict['c_md_ver_d'] = pygame.transform.rotate(image_dict['c_md_hor_r'], 270)

    image_dict['c_tl_hor'] = pygame.image.load('assets/comet_tail.png').convert_alpha()
    image_dict['c_tl_ver'] = pygame.transform.rotate(image_dict['c_tl_hor'], 90)

    image_dict['m_md_hor_r'] = pygame.image.load('assets/meteor_mid.png').convert_alpha()
    image_dict['m_md_ver_u'] = pygame.transform.rotate(image_dict['m_md_hor_r'], 90)
    image_dict['m_md_hor_l'] = pygame.transform.rotate(image_dict['m_md_hor_r'], 180)
    image_dict['m_md_ver_d'] = pygame.transform.rotate(image_dict['m_md_hor_r'], 270)

    image_dict['m_tl_hor'] = pygame.image.load('assets/meteor_tail.png').convert_alpha()
    image_dict['m_tl_ver'] = pygame.transform.rotate(image_dict['m_tl_hor'], 90)

    image_dict['m_co_ur'] = pygame.image.load('assets/meteor_corner.png').convert_alpha()
    image_dict['m_co_lr'] = pygame.transform.rotate(image_dict['m_co_ur'], -90)
    image_dict['m_co_ll'] = pygame.transform.rotate(image_dict['m_co_ur'], -180)
    image_dict['m_co_ul'] = pygame.transform.rotate(image_dict['m_co_ur'], -270)
 
    image_dict['c_co_ur'] = pygame.image.load('assets/comet_corner.png').convert_alpha()
    image_dict['c_co_lr'] = pygame.transform.rotate(image_dict['c_co_ur'], -90)
    image_dict['c_co_ll'] = pygame.transform.rotate(image_dict['c_co_ur'], -180)
    image_dict['c_co_ul'] = pygame.transform.rotate(image_dict['c_co_ur'], -270)

    return image_dict
 


  def translate_position(self, data):
    """tanslates the entire game board to the local one"""
    player1_pos = data['player1_location']
    player2_pos = data['player2_location']

    # print "Player 1 at  " + str(player1_pos)
    # print "Player 2 at  " + str(player2_pos)
    # print (self.tile[0]+1)*(self.GRID_SIZEX)
    # print (self.tile[0])*(self.GRID_SIZEX)
    # print (self.tile[1])*(self.GRID_SIZEY)
    # print (self.tile[1]+1)*(self.GRID_SIZEY)
    if (player1_pos[0] <= (self.tile[0]+1)*(self.GRID_SIZEX) and 
        player1_pos[0] >= self.tile[0]*(self.GRID_SIZEX) and 
        player1_pos[1] <= (self.tile[1]+1)*(self.GRID_SIZEY) and 
        player1_pos[1] >= self.tile[1]*(self.GRID_SIZEY)):
        translated_pos_1 = [player1_pos[0] - self.tile[0]*(self.GRID_SIZEX),
                           (self.tile[1])*(self.GRID_SIZEY) + player1_pos[1]] 
        # print "player 1 trans at " + str(translated_pos_1)
    else: translated_pos_1 = 0

    if (player2_pos[0] <= (self.tile[0]+1)*(self.GRID_SIZEX) and 
        player2_pos[0] >= self.tile[0]*(self.GRID_SIZEX) and 
        player2_pos[1] <= (self.tile[1]+1)*(self.GRID_SIZEY ) and 
        player2_pos[1] >= self.tile[1]*(self.GRID_SIZEY)):
        translated_pos_2 = [player2_pos[0] - self.tile[0]*(self.GRID_SIZEX),
                           (self.tile[1])*(self.GRID_SIZEY) + player2_pos[1] ] 
        # print "player 2 trans at " + str(translated_pos_1)
    else: translated_pos_2 = 0
    return(translated_pos_1, translated_pos_2)

  def make_data_struct(self, message, state):
    return


















