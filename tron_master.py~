# tron master node
import pygame
from pygame.locals import *
import socket, struct, threading, sys
import cPickle, time


FULL_GRID_SIZE = (64, 20) # number of locations in full game space
MONITOR_GRIDX = 2 # width 
MONITOR_GRIDY = 1 # height
SOCKET_DEL = '*ET*'


class LightBike():
  def __init__(self, startloc, startvel, color):
    self.location = startloc
    self.velocity = startvel
    self.color = color
  def movedown(self):
    self.velocity[0] = 0
    self.velocity[1] = 1
  def moveup(self):
    self.velocity[0] = 0
    self.velocity[1] = -1
  def moveleft(self):
    self.velocity[0] = -1
    self.velocity[1] = 0
  def moveright(self):
    self.velocity[0] = 1
    self.velocity[1] = 0
  def update(self):
    self.location[0] += self.velocity[0]
    self.location[1] += self.velocity[1]

def get_whole_packet(socket):
  data = ''
  while True:
    data += socket.recv(4024)
    split = data.split(SOCKET_DEL) # split at newline, as per our custom protocol
    if len(split) != 2: # it should be 2 elements big if it got the whole message
      pass
    else:
      x = cPickle.loads(split[0])
      return x

# def translate_to_global(self, data):
#   """translates the local data received to the global data here
#   """
#   return

# def send_to_socket(sock_list, data):
#   """determines which socket to send data to and then sends it."""
#   for sock in sock_list:
#     if 
# def send_to_where(self):
def loc_collision(bike):
  # check the location array to see if colided.
  if bike.location[0] < 0 or bike.location[0] > FULL_GRID_SIZE[0]:
    print "died of screen in x"
    return True
  if bike.location[1] < 0 or bike.location[1] > FULL_GRID_SIZE[1]:
    print "died off screen in y"
    return True

def close_sockets(sock_list):
  kill_struct = {'kill_state': 1 }
  kill_pickle = cPickle.dumps(kill_struct, cPickle.HIGHEST_PROTOCOL) + '*ET*'
  for x in range(0, len(sock_list)):
    for y in range(0, len(sock_list[x])):
      sock_list[x][y].sendall(kill_pickle)
      sock_list[x][y].shutdown(socket.SHUT_RDWR)
      sock_list[x][y].close()
  sys.exit()


grid = []
if __name__ == '__main__':
  pygame.init()
  location = []
  for x in range(0,FULL_GRID_SIZE[0] + 1):
    location.append([])
    for y in range(0,FULL_GRID_SIZE[1] + 1):
      location[x].append(0) # 0 

  player1 = LightBike([0,10], [1,0], (255,0,0))
  player2 = LightBike([65,10], [-1,0], (0,255,0))

  window = pygame.display.set_mode((20,20))
  sock_list = [[ [] for y in range(MONITOR_GRIDY)] for x in range(MONITOR_GRIDX)]
  ip_list = [('10.0.0.253', 20000), ('10.0.0.250', 20000)]#, ('localhost', 20001)]
  idx = 0
  for x in range(0, MONITOR_GRIDX):
    for y in range(0, MONITOR_GRIDY):
      sock_list[x][y] = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      sock_list[x][y].connect(ip_list[idx])
      idx += 1
  while True:
    # control block This will be the master node
    # send_struct = {'player1move':'', 'player2move': '', new_loc:[0,0]} # clear it everytime
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
          sys.exit()
      if event.type == KEYDOWN:
        if event.key == K_LEFT:
          player1.moveleft()
        if event.key == K_RIGHT:
          player1.moveright()
        if event.key == K_UP:
          player1.moveup()
        if event.key == K_DOWN:
          player1.movedown()
        if event.key == K_a:
          player2.moveleft()
        if event.key == K_d:
          player2.moveright()
        if event.key == K_w:
          player2.moveup()
        if event.key == K_s:
          player2.movedown()

    player1.update()
    player2.update()
    if loc_collision(player1):
      close_sockets(sock_list)
    if loc_collision(player2):
      close_sockets(sock_list)

    location[player1.location[0]][player1.location[1]] = 1
    location[player2.location[0]][player2.location[1]] = 1
    send_struct = {'player1_location': (player1.location[0], player1.location[1]),
                'player2_location': (player2.location[0], player2.location[1]),
                'kill_state': 0}
    print send_struct

    # make it so the render communicates the velocity vector and the of the position
    # of the players. Pass the players to other nodes. 
    data = cPickle.dumps(send_struct, cPickle.HIGHEST_PROTOCOL) + '*ET*'
    for x in range(0, len(sock_list)):
      for y in range(0, len(sock_list[x])):
        sock_list[x][y].sendall(data)
    state_list = []
    for x in range(0, len(sock_list)):
      for y in range(0, len(sock_list[x])):
        state_list.append(get_whole_packet(sock_list[x][y]))

    for idx, state in enumerate(state_list):
      print state
      
      # if state == 'player2 wins!':
      #   print 'exited, state was'
      #   print state
      #   sys.exit()

    # print y

